#!/bin/bash
#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

# set this to workaround expr problems in shFlags on freebsd
if uname -s | egrep -iq 'bsd'; then export EXPR_COMPAT=1; fi

# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
[ "$(dirname $0)" = '.' ] && GITFLOW_DIR=$(pwd) || GITFLOW_DIR=$(dirname $0);
ls -l $0 | grep -q ^l && GITFLOW_DIR=$(dirname `ls -l $0 | awk '{print $NF}'`);
export GITFLOW_DIR=$(echo "$GITFLOW_DIR" | sed -e 's,\\,/,g');

source "$GITFLOW_DIR/common/common-functions";

# load common functionality
source "$GITFLOW_DIR/gitflow-common"

##
# Checks out onto a given branch or master
#
# @param string current A branch to checkout onto [optional default master]
#
# @return LAST_EXIT_STATUS
#
helper_lastBranch() {
    current=$1;
    if [ $FORCE_MASTER -eq 0 ] || [ -z $current ] ; then
        current='master'
    fi

    if [ "$(git rev-parse --abbrev-ref HEAD)" != "$current" ] ; then
        git_do checkout $current;
    fi
}

##
# Updates git flow master / develop to the latest changes
#
# @return LAST_EXIT_STATUS
#
cmd_update() {
    DEFINE_boolean force false "Force update of git flow" f;
    FLAGS "$@" || exit $?;
    eval set -- "${FLAGS_ARGV}";

    CWD=$(pwd);
    FORCE_MASTER=1; # force master branch unless gitflow.core.mode is set
    cd $GITFLOW_DIR;
    [ ! -n $UPDATE ] || UPDATE=1;

    [ -n $ORIGIN ] && ORIGIN='origin';
    current=$(git_do rev-parse --abbrev-ref HEAD);
    lastUpdate=$(git_do config --get gitflow.core.lastupdate);
    mode=$(git_do config --get gitflow.core.mode);
    modeRetVal=$?;

    if [ $? -eq 1 ] ; then
        lastUpdate=$(now);
        git_do config --add gitflow.core.lastupdate $lastUpdate;
        UPDATE=0;
    fi

    pinfo 'Checking for updates to GitFlow';

    timestamp=$(timestamp 7);
    if noflag force && [ $lastUpdate -ge $timestamp ] && [ $UPDATE -ne 0 ]; then
        pinfo "No update required (updated within last 7 days)";
        cd $CWD;
        return 0;
    fi

    if [ $modeRetVal -eq 1 ] || [ "$mode" != 'develop' ]; then
        if [ "$mode" = 'skipupdate' ] ; then
            pinfo "Skip update mode enabled - skipping update check";
            cd $CWD;
            return 0;
        elif [ "$current" != 'master' ]; then
            debug 'Invalid production mode - forcing master branch';
            FORCE_MASTER=0;
        fi
    elif [ $modeRetVal -eq 2 ] ; then
        error 'Invalid or broken .git/config - please fix and try again';
        fill_n _SEP_LEN '*';
        exit 1;
    fi

    git_do fetch origin &>/dev/null;
    if flag force || [ $lastUpdate -lt $timestamp ] || [ $UPDATE -eq 0 ]; then
        if [ $modeRetVal -eq 2 ] ; then
            error 'Invalid or broken .git/config - please fix and try again';
            fill_n _SEP_LEN '*';
            exit 1;
        fi

        [ $1 ] && [ "$1" = '-f' ] && UPDATE=0;
        if has_local_changes; then
            error 'You have local changes to your GitFlow repository';
            error 'Please stash or commit them first';
            fill_n _SEP_LEN '*';
            exit 1;
        fi

        # always start on master branch
        if [ $FORCE_MASTER -eq 0 ] && [ "$current" != 'master' ] ; then
            git_do checkout master;
        fi

        git_compare_branches master $ORIGIN/master;
        retVal=$?;
        if [ $retVal -eq 0 ] ; then
            pinfo 'No updates available';
            UPDATE=1;
        elif [ $retVal -eq 1 ] ; then
            UPDATE=0;
        fi
    fi
    if [ $UPDATE -eq 0 ] ; then
        pinfo 'There are updates available for GitFlow';
        echo -n '** Do you wish to install them? > ';
        read inst;
        if [ "$inst" = "n" ] || [ "$isnt" = "no" ] ; then
            cd $CWD;
            fill _SEP_LEN '*';
            return 0;
        fi

        git_do pull --rebase $ORIGIN master || die '|** -- Could not pull from '$ORIGIN;

        git_do checkout develop;
        git_do pull --rebase $ORIGIN develop;
        git_do merge --no-ff -m'Merging master into develop branch' master || die '|** -- There were merge conflicts';

        branches=$(git branch | grep 'feature\|release\|hotfix' | awk '{print $NF}');
        for b in $branches; do
            git_do checkout $b;
            if git_remote_branch_exists $b ; then
                git_do pull --rebase $ORIGIN $b;
            fi
            git_do merge --no-ff -m'Merging master into '$b master || die '|** -- There were merge conflicts';
            if git_remote_branch_exists $b ; then
                git_do push $ORIGIN/$b;
            fi
        done

        # re-run gitflow-installer to ensure all links are maintained.
        sudo $GITFLOW_DIR/contrib/gitflow-installer.sh;
    fi

    helper_lastBranch "$current";
    git_do config --replace gitflow.core.lastupdate $(now);
    echo $sep;
    cd $CWD;
}

usage() {
	echo "usage: git flow <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "   init      Initialize a new git repo with support for the branching model."
    echo "   update    Update GitFlow main toolset.";
	echo "   feature   Manage your feature branches."
	echo "   release   Manage your release branches."
	echo "   hotfix    Manage your hotfix branches."
	echo "   support   Manage your support branches."
	echo "   version   Shows version information."
	echo
	echo "Try 'git flow <subcommand> help' for details."
}

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	# This environmental variable fixes non-POSIX getopt style argument
	# parsing, effectively breaking git-flow subcommand parsing on several
	# Linux platforms.
	export POSIXLY_CORRECT=1

	# use the shFlags project to parse the command line arguments
	. "$GITFLOW_DIR/gitflow-shFlags"
	FLAGS_PARENT="git flow"

  # allow user to request git action logging
  DEFINE_boolean show_commands false 'show actions taken (git commands)' g

  # do actual parsing
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# sanity checks
	SUBCOMMAND="$1"; shift

	if [ "$SUBCOMMAND" != 'update' ] && [ ! -e "$GITFLOW_DIR/git-flow-$SUBCOMMAND" ]; then
		usage
		exit 1
	fi

    if [ "$SUBCOMMAND" = "update" ] ; then
        cmd_update "$@";
        exit $?;
    else
        # auto-update if not run in 7 days
        cmd_update;
    fi

	# run command
	. "$GITFLOW_DIR/git-flow-$SUBCOMMAND"
	FLAGS_PARENT="git flow $SUBCOMMAND"

	# test if the first argument is a flag (i.e. starts with '-')
	# in that case, we interpret this arg as a flag for the default
	# command
	SUBACTION="default"
	if [ "$1" != "" ] && { ! echo "$1" | grep -q "^-"; } then
		SUBACTION="$1"; shift
	fi

    if [ "$SUBCOMMAND" != 'version' ] &&
       [ "$SUBACTION"  != 'cleanup' ];
    then
        git_common_cleanup;
    fi

	if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
		warn "Unknown subcommand: '$SUBACTION'"
		usage
		exit 1
	fi

    # set _LOG_FILE value
    _LOG_FILE="${GITFLOW_DIR}/logs/${SUBCOMMAND}-${SUBACTION}";

    # run the specified action
    if [ $SUBACTION != "help" ] && [ $SUBCOMMAND != "init" ] ; then
        init
    fi
    cmd_$SUBACTION "$@"
}

main "$@"
