#!/bin/bash

##
# If we are running this as an independant command we need to
# source in the common functions and set the GITFLOW_DIR path.
if [ -z $GITFLOW_DIR ] ; then
    [ "$(dirname $0)" = '.' ] && GITFLOW_DIR=$(pwd) || GITFLOW_DIR=$(dirname $0);
    ls -l $0 | grep -q ^l && GITFLOW_DIR=$(dirname `ls -l $0 | awk '{print $NF}'`);
    export GITFLOW_DIR=$(echo "$GITFLOW_DIR" | sed -e 's,\\,/,g');

    source "$GITFLOW_DIR/common/common-functions";
fi

[ ! -z $_username ] || _username="";
[ ! -z $NAME ] || NAME='';
##
# Gets the JIRA username for the current user.
#
# This method gets the jira username from stdin or
# uses the shell user if not specified.
#
# @return void
#
function _get_username ()
{
    if [ -z $JIRA_USERNAME ] ; then
        echo -n "Please enter your jira username ($(whoami)): ";
        read _username;
    else
        _username=$JIRA_USERNAME;
    fi

    if [ -z $_username ] ; then
        _username=$(whoami);
    fi
}

##
# Get the users jira password
#
# @param string feature The feature task to link
# @param string release The release task to link to.
#
# @return void
#
function _read_password ()
{
    local feature=$1;
    local release=$2;
    if [ -z $_username ] ; then
        _get_username;
    fi

    if [ -z $JIRA_PASSWORD ] ; then
        echo -n "Please enter the jira password for $_username: ";
        read -s password;
        echo;
    else
        password=$JIRA_PASSWORD;
    fi

    if [ -z $password ] ; then
        _read_password "$feature" "$release";
    else
        _add_feature_to_release $_username $password $feature $release;
    fi
}

##
# Links a feature task to a release management task
#
# @param string username The jira user to log in as.
# @param string password The password to log into jira with.
# @param string feature  The feature to link.
# @param string release  The release to link to.
#
# @return int 0 on success, 1-5 on error
#
function _add_feature_to_release ()
{
    local saveifs=$IFS;
    IFS=$'\n';

    local json_exec="$GITFLOW_DIR/json-sh/JSON.sh";
    local username=$1;
    local password=$2;
    local feature=$3;
    local release=$4;
    local repoName=$(_get_repo_name);

    local address='http://jira.internal.plus.net/rest/api/latest';

    local response=($(
        curl --silent -D- -u $username:$password -X GET -H "Content-Type: application/json" $address/issue/$release
    ));

    local responseCode=$(echo ${response[0]} | cut -d\  -f2);
    local body=${response[${#response[@]} - 1]};
    if is_valid_request $(echo $responseCode); then
        local repos=$(
            echo $body |
                $json_exec |
                grep '^\["fields","customfield_10526"\].*' |
                sed 's/"//g' |
                awk '{print $2}'
        );

        if [ -z $repos ] ; then
            repos="$repoName";
        elif ! echo $repos | grep -q $repoName ; then
            repos="$repos\r\n$repoName";
        else
            pinfo "Not adding $repoName - already added";
        fi
        repos=$(echo $repos | sed 's/\\r\\n/ /g' | tr " " "\n" | sort | tr "\n" " " | sed 's/^[ \t]*//;s/[ \t]*$//;s/ /\\r\\n/g');
        local json='{ "update" : { "customfield_10526" : [{"set" : "'$repos'"}] } }';

        response=($(
            curl -D- -u $username:$password \
                -X PUT --data "$json"       \
                -H "Content-Type: application/json" \
                $address/issue/$release 2>/dev/null
        ));
    fi

    responseCode=$(echo ${response[0]} | cut -d\  -f2);
    body=${response[${#response[@]} - 1]};

    if is_valid_request $responseCode; then
        pinfo "Added $repoName to list of release repos";
        response=($(
            curl --silent -D- -u $username:$password -X GET -H "Content-Type: application/json" $address/issue/$release/remotelink
        ));

        responseCode=$(echo ${response[0]} | cut -d\  -f2);
        body=${response[${#response[@]} - 1]};
        if is_valid_request $(echo $responseCode); then
            if ! echo $body | grep -q $feature ; then
                local description=$(echo "$(_get_name)" | cut -d- -f4- | sed 's/-/ /g');
                description=$feature' - '$(tr '[:lower:]' '[:upper:]' <<< ${description:0:1})${description:1};
                json='{ "object" : { "url":"http://jira.internal.plus.net/browse/'$feature'", "title":"'$description'" } }';

                response=($(
                    curl -D- -u $username:$password \
                        -X POST --data $json      \
                        -H "Content-Type: application/json" \
                        $address/issue/$release/remotelink 2>/dev/null
                ));

                responseCode=$(echo ${response[0]} | cut -d\  -f2);
                body=${response[${#response[@]} - 1]};

                if is_valid_request $responseCode; then
                    pinfo "Linked feature $feature to $release";
                    IFS=$saveifs;
                    return 0;
                fi
            else
                pinfo "Feature $feature has already been linked to $release";
                return 0;
            fi
        fi
    fi
    warn "Invalid JSON request to JIRA API";
    warn "Failed to link feature to http://jira.internal.plus.net/browse/$release";
    warn "Please update this manually";
    IFS=$saveifs;
    return 1;
}


function is_valid_request()
{
    local responseCode=$1;
    case $responseCode in
        20[0-5])
            return 0;
        ;;
        400)
            echo "Failed to link issue due to an invalid comment value" >&2;
            return 1;
        ;;
        401)
            echo $result | grep 'AUTHENTICATED_FAILED' &>/dev/null;
            returnVal=$?;
            if [ $returnVal -eq 0 ] ; then
                echo 'Failed to link issue. Invalid password supplied.';
                _read_password $feature $release;
                return $?;
            else
                echo $result | grep 'AUTHENTICATION_DENIED' &>/dev/null;
                returnVal=$?;
                if [ $returnVal -eq 0 ] ; then
                    echo 'Failed to link issue due to multiple failed login attempts.' >&2;
                    echo 'Please log out of Jira using your web browser and validate with the captcha before trying again' >&2;
                    return 2;
                else
                    echo 'Failed to link issue due to invalid permissions' >&2;
                fi
            fi
            return 3;
        ;;
        404)
            echo "Cannot find one of the supplied issues. Please check and try again" >&2;
            return 4;
        ;;
        500)
            echo "Malformed request. Please correct supplied JSON and try again" >&2;
            return 5;
        ;;
    esac
}

##
# Works out the name of the current repository
#
# @repositoryeturn int 1 if the current directory or parent is not a git repo
#
function _get_repo_name ()
{
    wd=$(pwd);
    while [ ! -d ".git" ]  && [ "$(pwd)" != "/" ] ; do
        cd ..;
    done

    local moduleName=$(basename `pwd`);
    if [ "$moduleName" = "/" ] ; then
        echo "Cannot find root directory for current module. Are you sure it's a git repository?" >&2;
        cd $wd;
        return 1;
    fi
    echo $moduleName;
    return 0;
}

##
# Gets the feature name from the current branch
#
# @return void
#
function _get_name ()
{
    if [ ! -z $NAME ] ; then
        echo $NAME | sed 's/feature-//';
    else
        echo $(git rev-parse --abbrev-ref HEAD | cut -d- -f2- );
    fi
}

##
# Gets the JIRA ticket from the current feature branch name
#
# @return void
#
function _get_ticket_id_from_feature_name ()
{
    if [ -z $NAME ] ; then
        NAME=$(_get_name);
    fi
    echo $NAME | grep -q ^feature;
    if [ $? -eq 0 ] ; then
        NAME=$(echo $NAME | sed 's/^feature-//');
    fi
    echo $NAME | cut -d- -f1,2; # returns JIRA-1234
}

##
# Prints the script usage
#
# @return void
#
function _usage()
{
    echo "$(basename $0) <releaseId> [<featureId>]";
    echo "    Release ID is the JIRA task number for the release you want this feature to be part of";
    echo "    Feature ID is optional. If not specified it will be taken from the current branch";
    return 0;
}

##
# Entry point to the script
#
# @return void
#
function _link_jira_issue ()
{
    local release=$1;
    if [ -z $release ] ; then
        echo "You must specify a release id";
        _usage;
        return 1;
    fi
    local feature=$2;
    if [ "$2" = "" ] ; then
        feature=$(_get_ticket_id_from_feature_name);
    else
        if [ "$(echo $2 | cut -d- -f1)" = "feature" ] ; then
            NAME=$2;
            echo "-----------"
            echo "NAME=$NAME";
            echo "-----------"
            feature=$(_get_ticket_id_from_feature_name);
        fi
    fi

    echo "Linking feature $feature to Release Management task $release";
    _read_password $feature $release;
}

_link_jira_issue $@;
